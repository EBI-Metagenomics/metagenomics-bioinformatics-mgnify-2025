---
title: "The genome_uploader: tutorial"
date: 2025-10-08
license: "Apache 2.0"
order: 4
author:
  - name: Germana Baldi
    orcid: 0000-0003-1719-5206
    email: germanab@ebi.ac.uk
    affiliation: 
      - name: EMBL-EBI
        url: www.ebi.ac.uk
---

This session will simulate genomes registration and submission with the `genome_uploader`, a tool developed within MGnify to facilitate the upload of bins and MAGs to the ENA (European Nucleotide Archive). If you are interested, you can find the genome_uploader code on [github](https://github.com/EBI-Metagenomics/genome_uploader), on [pypi](https://pypi.org/project/genome-uploader/) and [bioconda](https://bioconda.github.io/recipes/genome-uploader/README.html).

When you submit genomes to the ENA, you need to register a sample for every genome containing all the relevant metadata describing the genome and the sample of origin. The `genome_uploader` acts as the main linker to preserve sample metadata as much as possible. For every genome to register, you need an INSDC run or assembly accession associated to the genome in order for the script to inherit its relevant metadata. On top of those metadata, the script adds metadata specified by the user that are specific to the genome, like taxonomy, statistics, or the tools used to generate it. The metadata that ENA requires are descibed in the checklist for [MAGs](https://www.ebi.ac.uk/ena/browser/view/ERC000050) and for [bins](https://www.ebi.ac.uk/ena/browser/view/ERC000047), respectively.

First, let's access the exercise folder. Open a terminal and type:

```bash
cd course_dir/work_dir/Day_3/uploading_genomes_to_ENA
```

You will find a starting dataset of two genomes. Together with them, `input_example.tsv` is a table containing metadata about those genomes. It will like similar to this: 

::: {.table-responsive}
| genome_name | genome_path | accessions | assembly_software | binning_software | binning_parameters | stats_generation_software | completeness | contamination | genome_coverage | metagenome | co-assembly | broad_environment | local_environment | environmental_medium | rRNA_presence | taxonomy_lineage |
| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
| L_sakei | path/to/L_sakei.fa.gz | SRR11910206 | megahit_v1.2.9 | metabat_v1.2 | default | CheckM2_v1.0.1 | 99.7 | 0.38 | 27 | marine sediment metagenome | False | marine | coast | coastal sediment | True | d__Bacteria;p__Firmicutes;c__Bacilli;o__Lactobacillales;f__Lactobacillaceae;g__Latilactobacillus;s__Lactobacillus sakei |
:::

With columns indicating:

  * _genome_name_: genome id (unique string identifier)
  * _accessions_: run(s) or assembly(ies) the genome was generated from (DRR/ERR/SRRxxxxxx for runs, DRZ/ERZ/SRZxxxxxx for assemblies). If the genome was generated by a co-assembly of multiple runs, separate them with a comma.
  * _assembly_software_: assemblerName_vX.X
  * _binning_software_: binnerName_vX.X
  * _binning_parameters_: binning parameters
  * _stats_generation_software_: software_vX.X
  * _completeness_: `float` (optional field for bins)
  * _contamination_: `float` (optional field for bins)
  * _rRNA_presence_: `True/False` if all among 5S, 16S, and 23S genes, and at least 18 tRNA genes, have been detected in the genome (optional field for bins)
  * _NCBI_lineage_: full NCBI lineage - format: `x;y;z;...`. The same organism can be described in two different ways:  either in tax ids (`integers`) or `strings`. For example, the lineage for _E. coli_ can be:
    * `Bacteria;Pseudomonadati;Pseudomonadota;Gammaproteobacteria;Enterobacterales;Enterobacteriaceae;Escherichia`
    * `2;1224;1236;91347;543;561;562`
  * _metagenome_: needs to be listed in the taxonomy tree [here](<https://www.ebi.ac.uk/ena/browser/view/408169?show=tax-tree>) (you might need to press "Tax tree - Show" in the right most section of the page)
  * _co-assembly_: `True/False`, whether the genome was generated from a co-assembly. N.B. the script only supports co-assemblies generated from the same project.
  * _genome_coverage_ : genome coverage against raw reads
  * _genome_path_: path to genome to upload (already compressed)
  * _broad_environment_: `string` (explanation following)
  * _local_environment_: `string` (explanation following)
  * _environmental_medium_: `string` (explanation following)

According to ENA checklist's guidelines, `broad_environment` describes the broad ecological context of a sample - desert, taiga, coral reef, ... `local_environment` is more local - lake, harbour, cliff, ... `environmental_medium` is either the material displaced by the sample, or the one in which the sample was embedded prior to the sampling event - air, soil, water, ...
For host-associated metagenomic samples, the three variables can be defined similarly to the following example for the chicken gut metagenome: "chicken digestive system", "digestive tube", "caecum". More information can be found at [ERC000050](<https://www.ebi.ac.uk/ena/browser/view/ERC000050>) for bins and [ERC000047](<https://www.ebi.ac.uk/ena/browser/view/ERC000047>) for MAGs under field names "broad-scale environmental context", "local environmental context", "environmental medium"

If your genome was generated from raw reads available on the INSDC (including ENA and GenBank), the `genome_uploader` will automatically inherit relevant metadata for that sample to make. For example, if you are submitting a MAG generated from read SRR11910206, some of the sample metadata will be inherited for the genome sample registration (e.g. `collection_date`, `isolation_source`). 

Take a look at the [GCS MIMAG checklist](https://www.ebi.ac.uk/ena/browser/view/ERC000047) as a reference. You will notice that bins and MAGs checklists are very similar, as mandatory fields are the same. You can compare it with the [bins checklist](https://www.ebi.ac.uk/ena/browser/view/ERC000050) yourself.

## Registering and submitting genomes

As explained before, you need to perform 4 steps to submit bins and MAGs:

* Register a study
* Register binned and/or MAG samples
* Generate manifest files
* Submit assemblies with Webin-CLI

The `genome_uploader` takes care of the last 3 steps. 2 and 3 are executed together, while the third one needs an extra command to submit previously generated files to ENA servers.

## Accessing yor Webin profile

Go to [this spreadsheet](https://docs.google.com/document/d/1uPy4kua_WjaGeGbPmxA-h15WX9g9_FcS/edit?usp=sharing&ouid=103754228271574317142&rtpof=true&sd=true) and reserve a Webin profile

## Registering a study
![](genome_uploader/register_a_study.png)

## Registering MAG samples and generating manifest files

It's time to launch the `genome_uploader`:

```bash
python genome_upload.py -u UPLOAD_STUDY \
--genome_info METADATA_FILE (--mags | --bins) \
--webin WEBIN_ID --password PASSWORD \
--centre_name CENTRE_NAME
```

Where:

* `-u UPLOAD_STUDY`: study accession for genomes upload to ENA (in format ERPxxxxxx or PRJEBxxxxxx)
* `---genome_info METADATA_FILE` : genomes metadata file in tsv format
* `--mags, --bins`: select EITHER OF THESE for either bin or MAG upload
* `--webin WEBIN_ID`: webin id (format: Webin_XXXXX)
* `--password PASSWORD`: webin password
* `--centre_name CENTRE_NAME`: name of the centre generating and uploading genomes

This step will also generate manifest files. 

The logging output from this command will tell you which metadata objects have been accessed, and also where the output files have gone.
This should be the `example_data` directory, but it will also have created a `MAG_uploader` directory.
Browse the files here to see the manifests that have been created, which combine the ENA metadata and the provided metadata (e.g. binning software).

## Submitting your genomes
After checking that all needed manifests exist, it is necessary to use ENA's webin-cli resource to upload genomes.

First, download the resource in your folder.

```bash
download_webin_cli -v 8.2.0
```

Then, time to submit!

```bash
java -jar webin-cli-8.2.0.jar \
-context=genome -manifest=MANIFEST_FILE \
-userName="Webin-XXX" -password="YYY" \
-test -submit
```

## Try it yourself

:::{.callout-step .callout-tip}
Your task is to generate another tsv table with sample metadata describing the genomes you want to register and submit.
:::

You will be free to insert values as you wish, as long as regular expressions and mandatory fields described in the checklist are respected. You will need to select whether you are uploading bins or MAGs, and select your checklist accordingly. 

:::{.callout-note}
To register a sample, a relative set of metadata must be filled according to the selected checklist. Some of them are mandatory, while some others are only recommended. The `genome_uploader` will automatically pick the right checklist depending on the input flag:

* __GSC MIMAG__ for MAG samples (`-mags`)
* __ENA binned metagenome__ for binned samples (`-bins`)
:::

The main difference between bins and MAGs lies in the uniqueness and the quality of your data. Within an ENA study, there should only be one MAG per species, which should be the highest quality representative genome per predicted species. 

Here we suggest a hypothetical scenario you might want to follow to make the metadata search more interesting

Suppose your original dataset was small, very small, and it only generated three bins. Two of these bins represent the same species, but their statistics are extremely different. One assembled quite well, while the other one was highly contaminated. One would be considered "medium quality", while the other "high quality". 

:::{.callout-tip}
The INSDC defines a genome as high-quality when: 

![](genome_uploader/high-quality-def-genomeUploader.png)
::: 

According to what we previously mentioned, two of these bins could be categorised as MAGs, while the lower-quality bin would stay as a bin.

:::{.callout-tip}
Taxonomy lineages can be listed in either string (taxonomic names) or integer (taxids) format. An example of valid taxonomies you could use in this scenario could be:

* names: `d__Bacteria;p__Proteobacteria;c__Gammaproteobacteria;o__Enterobacterales;f__Vibrionaceae;g__Photobacterium;s__Photobacterium piscicola`
* ids: `1;131567;2759;33154;4751;451864;5204;452284;1538075;162474;742845;55193;76775`
:::
